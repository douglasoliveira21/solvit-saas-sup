# Generated by Django 4.2.7 on 2025-08-30 21:17

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tenants', '0003_adconfiguration'),
    ]

    operations = [
        migrations.CreateModel(
            name='TenantSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('password_min_length', models.PositiveIntegerField(default=8, help_text='Comprimento mínimo da senha', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(32)])),
                ('password_require_uppercase', models.BooleanField(default=True, help_text='Exigir pelo menos uma letra maiúscula')),
                ('password_require_lowercase', models.BooleanField(default=True, help_text='Exigir pelo menos uma letra minúscula')),
                ('password_require_numbers', models.BooleanField(default=True, help_text='Exigir pelo menos um número')),
                ('password_require_special_chars', models.BooleanField(default=True, help_text='Exigir pelo menos um caractere especial')),
                ('password_expiry_days', models.PositiveIntegerField(default=90, help_text='Dias para expiração da senha (0 = nunca expira)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(365)])),
                ('account_lockout_enabled', models.BooleanField(default=True, help_text='Habilitar bloqueio de conta após tentativas falhadas')),
                ('account_lockout_threshold', models.PositiveIntegerField(default=5, help_text='Número de tentativas falhadas antes do bloqueio', validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(20)])),
                ('account_lockout_duration_minutes', models.PositiveIntegerField(default=30, help_text='Duração do bloqueio em minutos', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(1440)])),
                ('session_timeout_minutes', models.PositiveIntegerField(default=480, help_text='Timeout da sessão em minutos', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(1440)])),
                ('max_concurrent_sessions', models.PositiveIntegerField(default=3, help_text='Número máximo de sessões simultâneas por usuário', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('audit_log_retention_days', models.PositiveIntegerField(default=365, help_text='Dias para retenção dos logs de auditoria', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(2555)])),
                ('audit_failed_logins', models.BooleanField(default=True, help_text='Registrar tentativas de login falhadas')),
                ('audit_user_changes', models.BooleanField(default=True, help_text='Registrar alterações de usuários')),
                ('audit_group_changes', models.BooleanField(default=True, help_text='Registrar alterações de grupos')),
                ('audit_permission_changes', models.BooleanField(default=True, help_text='Registrar alterações de permissões')),
                ('sync_user_photos', models.BooleanField(default=False, help_text='Sincronizar fotos de usuários do AD/M365')),
                ('sync_user_attributes', models.JSONField(blank=True, default=list, help_text='Lista de atributos de usuário para sincronizar')),
                ('sync_group_attributes', models.JSONField(blank=True, default=list, help_text='Lista de atributos de grupo para sincronizar')),
                ('auto_create_users', models.BooleanField(default=True, help_text='Criar automaticamente usuários durante sincronização')),
                ('auto_disable_users', models.BooleanField(default=True, help_text='Desabilitar automaticamente usuários removidos do AD/M365')),
                ('email_notifications_enabled', models.BooleanField(default=True, help_text='Habilitar notificações por email')),
                ('notify_user_creation', models.BooleanField(default=True, help_text='Notificar sobre criação de usuários')),
                ('notify_user_deactivation', models.BooleanField(default=True, help_text='Notificar sobre desativação de usuários')),
                ('notify_password_expiry', models.BooleanField(default=True, help_text='Notificar sobre expiração de senhas')),
                ('notify_sync_errors', models.BooleanField(default=True, help_text='Notificar sobre erros de sincronização')),
                ('notification_email_from', models.EmailField(blank=True, help_text='Email remetente para notificações (deixe vazio para usar padrão)', max_length=254)),
                ('ui_theme', models.CharField(choices=[('light', 'Claro'), ('dark', 'Escuro'), ('auto', 'Automático')], default='light', help_text='Tema da interface', max_length=20)),
                ('ui_language', models.CharField(choices=[('pt-BR', 'Português (Brasil)'), ('en-US', 'English (US)'), ('es-ES', 'Español')], default='pt-BR', help_text='Idioma da interface', max_length=10)),
                ('ui_timezone', models.CharField(default='America/Sao_Paulo', help_text='Fuso horário para exibição de datas', max_length=50)),
                ('max_users_limit', models.PositiveIntegerField(default=1000, help_text='Limite máximo de usuários', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_groups_limit', models.PositiveIntegerField(default=100, help_text='Limite máximo de grupos', validators=[django.core.validators.MinValueValidator(1)])),
                ('custom_settings', models.JSONField(blank=True, default=dict, help_text='Configurações customizadas específicas do tenant')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_settings', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Configuração do Tenant',
                'verbose_name_plural': 'Configurações dos Tenants',
                'ordering': ['tenant__name'],
            },
        ),
    ]
